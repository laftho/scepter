<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1">

<title><%= title %></title>

<link rel="stylesheet" href="bootstrap/css/bootstrap.min.css">
<link rel="stylesheet" href="bootstrap/css/bootstrap-theme.min.css">
<link rel="stylesheet" href="css/main.css">

<script src="jquery/jquery.min.js"></script>
<script src="bootstrap/js/bootstrap.min.js"></script>

<script src="json-viewer/jquery.json-viewer.js"></script>
<link href="json-viewer/jquery.json-viewer.css" type="text/css" rel="stylesheet" />

<script src="codemirror/codemirror.js"></script>
<link href="codemirror/codemirror.css" type="text/css" rel="stylesheet" />
<script src="codemirror/mode/javascript.js"></script>

<script>
    $(function() {
        const codeMirror = CodeMirror.fromTextArea(document.getElementById("rule-code"), {
            lineNumbers: true,
            mode: "javascript"
        });

        codeMirror.on("change", () => codeMirror.save());
    });
</script>

<script src="supermodel.js"></script>

<script>
    let supermodel = new Supermodel();

    let statusStorage = {
        save: (key, value) => {
            return new Promise((resolve) => {
                let data = {proxy:value};
                $.ajax({
                    method: "POST",
                    url: "/status",
                    contentType: "application/json",
                    data: JSON.stringify(data)
                })
                .done((data) => {
                    resolve(data.proxy);
                });
            });
        },
        load: () => {
            return new Promise((resolve) => {
                $.ajax({
                    method: "GET",
                    url: "/status"
                })
                .done((data) => {
                    resolve(data.proxy);
                });
            });
        }
    }

    let proxyConfigStorage = {
        save: (key, value) => {
            return new Promise((resolve) => {
                let data = { proxy: {
                    port: models.proxy.port.value,
                    sslport: models.proxy.sslport.value,
                    base: models.proxy.base.value
                }};
                data.proxy[key] = value;

                $.ajax({
                    method: "POST",
                    url: "/config",
                    contentType: "application/json",
                    data: JSON.stringify(data)
                })
                .done((data) => {
                    resolve(data.proxy[key]);
                });
            });
        },
        load: (key) => {
            return new Promise((resolve) => {
                $.ajax({
                    method: "GET",
                    url: "/config"
                })
                .done((data) => {
                    resolve(data.proxy[key]);
                });
            });
        }
    };

    let rulesStorage = {
        save: (key, value) => {
            return new Promise((resolve) => {
                $.ajax({
                    method: "POST",
                    url: "/rules",
                    contentType: "application/json",
                    data: JSON.stringify(value)
                })
                .done((data) => resolve(data));
            });
        },
        load: (key) => {
            return new Promise((resolve) => {
                $.ajax({ method: "GET", url: "/rules" }).done((data) => resolve(data));
            });
        }
    };

    let models = {
        proxy: {
            port: new Model({ key: "port", autosave: true, storage: proxyConfigStorage }),
            sslport: new Model({ key: "sslport", autosave: true, storage: proxyConfigStorage }),
            base: new Model({ key: "base", autosave: true, storage: proxyConfigStorage })
        },
        status: new Model({ key: "status", autosave: true, storage: statusStorage }),
        rules: new Model({
            key: "rules",
            autosave: true,
            storage: rulesStorage,
            default: [],
            render: (element, value) => {
                $(element).empty();
                if (value) {
                    value.forEach((val) => {
                        let isSavedLocally = (() => {
                            let rules = localStorage.rules;

                            if (!rules) return false;

                            rules = JSON.parse(rules);

                            let hash = rulehash(val);
                            return rules.hasOwnProperty(hash);
                        })();

                        $(element).append(
`<li class="list-group-item" id="${val.id}">
    <div class="row">
        <div class="col-sm-1">
            <button class="btn btn-xs ${(isSavedLocally) ? "btn-warning" : "btn-default"}" onclick="saveLocal(this, ${val.id});"><span class="glyphicon glyphicon-star" aria-hidden="true"></span></button>
            <span>${val.id}</span>
            <div class="badge">${(val.before) ? "before" : (val.after) ? "after" : ""}</div>
        </div>
        <div class="col-sm-9">
            <pre>${val.pattern}</pre>
        </div>
        <div class="col-sm-2">
            <button class="btn btn-primary" type="button" data-toggle="collapse" data-target="#${val.id}-code-collapse" aria-expanded="false" aria-controls="${val.id}-code-collapse">
              Code
            </button>
            <button class="btn btn-danger" onclick="deleteRule(${val.id});">Delete</button>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-12">
            <div class="collapse" id="${val.id}-code-collapse">
                <div class="well">
                    <textarea id="${val.id}-code">(function() {\n${val.code}\n});</textarea>
                </div>
            </div>
        </div>
    </div>
</li>
`);

                        CodeMirror.fromTextArea(document.getElementById(val.id + "-code"), {
                            readOnly: true,
                            lineNumbers: true,
                            mode: "javascript"
                        });
                    });
                }
            },
            events: {
                modified: (val) => models.ruleCount.value = val.length,
                loaded: (val) => models.ruleCount.value = val.length
            }
        }),
        ruleCount: new Model({ key: "ruleCount", default: 0 }),
        localRuleCount: new Model({key: "localRuleCount", default: 0, storage:{
            load: () => {
                return new Promise((resolve) => {
                    if (typeof(Storage) === "undefined") {
                        resolve(0);
                    }

                    resolve((localStorage.rules) ? Object.getOwnPropertyNames(JSON.parse(localStorage.rules)).length : 0);
                });
            }
        }})
    };

    window.addEventListener("load", () => {
        supermodel.register(models.proxy.port);
        supermodel.register(models.proxy.sslport);
        supermodel.register(models.proxy.base);
        supermodel.register(models.status);
        supermodel.register(models.rules);
        supermodel.register(models.ruleCount);
        supermodel.register(models.localRuleCount);
    });
</script>

<script src="/socket.io/socket.io.js"></script>
<script>
    $(function () {
        const socket = io();
        socket.on("request-added", (message) => {
            $("#requests").append(`
                <tr id="${message.scepterId}" class="request">
                    <td class="col-sm-5 method">${message.req.method}</td>
                    <td class="col-sm-5 url">${message.req.url}</td>
                    <td class="col-sm-5 request-body">${message.req.body}</td>
                    <td class="col-sm-5 status"></td>
                    <td class="col-sm-5 response-body"></td>
                </tr>
            `);

            $(`#${message.scepterId} .request-body`).jsonViewer(JSON.parse(message.req.body), {collapsed: true});
        });

        socket.on("request-updated", (message) => {
            $(`#${message.scepterId} .status`).append(message.res.status);

            let body = message.res.text;

            if (body) {
                try {
                    body = JSON.parse(body);
                } catch(ex) { console.log(ex); }
            }

            $(`#${message.scepterId} .response-body`).jsonViewer(body, {collapsed: true});
        });

        socket.on("rule-fired", (message) => {
            let el = $(`#${message.req.scepterId} status`);

            if (el) {
                el.append(`<div class="badge">rule-${message.rule.id}</div>`);
            }
        });
    });
</script>

