<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1">

<title><%= title %></title>

<link rel="stylesheet" href="bootstrap/css/bootstrap.min.css">
<link rel="stylesheet" href="bootstrap/css/bootstrap-theme.min.css">
<link rel="stylesheet" href="css/main.css">

<script src="jquery/jquery.min.js"></script>
<script src="bootstrap/js/bootstrap.min.js"></script>

<script src="json-viewer/jquery.json-viewer.js"></script>
<link href="json-viewer/jquery.json-viewer.css" type="text/css" rel="stylesheet" />

<script src="codemirror/codemirror.js"></script>
<link href="codemirror/codemirror.css" type="text/css" rel="stylesheet" />
<script src="codemirror/mode/javascript.js"></script>

<script>
    /*
    $(function() {
        const codeMirror = CodeMirror.fromTextArea(document.getElementById("rule-code"));
    });
    */
</script>

<script src="supermodel.js"></script>

<script>
    let supermodel = new Supermodel();

    let statusStorage = {
        save: (key, value) => {
            return new Promise((resolve) => {
                let data = {proxy:value};
                $.ajax({
                    method: "POST",
                    url: "/status",
                    contentType: "application/json",
                    data: JSON.stringify(data)
                })
                .done((data) => {
                    resolve(data.proxy);
                });
            });
        },
        load: () => {
            return new Promise((resolve) => {
                $.ajax({
                    method: "GET",
                    url: "/status"
                })
                .done((data) => {
                    resolve(data.proxy);
                });
            });
        }
    }

    let proxyConfigStorage = {
        save: (key, value) => {
            return new Promise((resolve) => {
                let data = { proxy: {
                    port: models.proxy.port.value,
                    sslport: models.proxy.sslport.value,
                    base: models.proxy.base.value
                }};
                data.proxy[key] = value;

                $.ajax({
                    method: "POST",
                    url: "/config",
                    contentType: "application/json",
                    data: JSON.stringify(data)
                })
                .done((data) => {
                    resolve(data.proxy[key]);
                });
            });
        },
        load: (key) => {
            return new Promise((resolve) => {
                $.ajax({
                    method: "GET",
                    url: "/config"
                })
                .done((data) => {
                    resolve(data.proxy[key]);
                });
            });
        }
    };

    let rulesStorage = {
        save: (key, value) => {
            return new Promise((resolve) => {
                let data = { proxy: {
                    port: models.proxy.port.value,
                    sslport: models.proxy.sslport.value,
                    base: models.proxy.base.value
                }};
                data.proxy[key] = value;

                $.ajax({
                    method: "POST",
                    url: "/rules",
                    contentType: "application/json",
                    data: JSON.stringify(data)
                })
                .done((data) => {
                    resolve(data.proxy[key]);
                });
            });
        },
        load: (key) => {
            return new Promise((resolve) => {
                $.ajax({
                    method: "GET",
                    url: "/config"
                })
                    .done((data) => {
                        resolve(data.proxy[key]);
                    });
            });
        }
    };

    let models = {
        proxy: {
            port: new Model({ key: "port", autosave: true, storage: proxyConfigStorage }),
            sslport: new Model({ key: "sslport", autosave: true, storage: proxyConfigStorage }),
            base: new Model({ key: "base", autosave: true, storage: proxyConfigStorage })
        },
        status: new Model({ key: "status", autosave: true, storage: statusStorage }),
        rules: new Model({ key: "rules", autosave: true, storage: rulesStorage })
    };

    window.addEventListener("load", () => {
        supermodel.register(models.proxy.port);
        supermodel.register(models.proxy.sslport);
        supermodel.register(models.proxy.base);
        supermodel.register(models.status);
    });
</script>

<script src="/socket.io/socket.io.js"></script>
<script>
    $(function () {
        const socket = io();
        socket.on("request-added", (message) => {
            $("#requests").append(`
                <tr id="${message.scepterId}" class="request">
                    <td class="col-sm-5 method">${message.req.method}</td>
                    <td class="col-sm-5 url">${message.req.url}</td>
                    <td class="col-sm-5 request-body">${message.req.body}</td>
                    <td class="col-sm-5 status"></td>
                    <td class="col-sm-5 response-body"></td>
                </tr>
            `);

            $(`#${message.scepterId} .request-body`).jsonViewer(JSON.parse(message.req.body), {collapsed: true});
        });

        socket.on("request-updated", (message) => {
            $(`#${message.scepterId} .status`).append(message.res.status);
            $(`#${message.scepterId} .response-body`).jsonViewer(JSON.parse(message.res.text), {collapsed: true});
        });
    });
</script>

